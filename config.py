import configparser
import shutil
from pathlib import Path

def resolve_tool_path(tool_name: str, fallback_path: str) -> str:
    """Resolve tool path from system PATH or fallback to default."""
    path = shutil.which(tool_name)
    if path:
        return path
    if Path(fallback_path).is_file() or Path(fallback_path).is_dir():
        return fallback_path
    return tool_name

def load_config(config_path: str) -> dict:
    """Load configuration from a config file."""
    config = configparser.ConfigParser(interpolation=None)  # Disable interpolation
    base_defaults = {
        'Settings': {
            'DNSRECON_PATH': '/usr/bin/dnsrecon',
            'SUBFINDER_PATH': '/usr/bin/subfinder',
            'AMASS_PATH': '/usr/bin/amass',
            'HTTPX_PATH': '/usr/bin/httpx',
            'SHODAN_PATH': '/usr/bin/shodan',
            'SHODAN_API_KEY': None,
            'NAABU_PATH': '/usr/bin/naabu',
            'NUCLEI_PATH': '/usr/bin/nuclei',
            'WPSCAN_PATH': '/usr/bin/wpscan',
            'WPSCAN_API_TOKEN': None,
            'WAYBACKURLS_PATH': '/usr/bin/waybackurls',
            'GOSPIDER_PATH': '/usr/bin/gospider',
            'SQLMAP_PATH': '/usr/bin/sqlmap',
            'CURL_PATH': '/usr/bin/curl',
            'ZAP_API_URL': 'http://localhost:8080',
            'ZAP_API_KEY': None,
            'OPENVAS_USERNAME': None,
            'OPENVAS_PASSWORD': None,
            'DALFOX_PATH': '/usr/bin/dalfox',
            'BXSS_URL': None,
            'REDIRECT_URL': 'https://example.com',
            'KATANA_PATH': '/usr/bin/katana',
            'FFUF_PATH': '/usr/bin/ffuf',
            'TRUFFLEHOG_PATH': '/usr/bin/trufflehog',
            'WORDLIST': '/usr/share/wordlists/seclists/Discovery/Web-Content/Common.txt'
        },
        'ToolSettings': {
            'sqlmap_level': '2',
            'sqlmap_risk': '2'
        },
        'Dictionaries': {
            'DNS_WORDLIST': '/path/to/seclists/Discovery/DNS/subdomains-top1million-5000.txt',
            'LFI_PAYLOADS': '../../../../etc/passwd,../../windows/win.ini',
            'CMS_PATHS': '/wp-config.php,/wp-admin/,/wp-login.php,/wp-content/,/configuration.php,/administrator/,/sites/default/settings.php,/user/login',
            'LOGIN_PATHS': '/login,/admin,/signin,/dashboard,/wp-login.php,/user/login'
        },
        'ToolParams': {
            'HttpxCommonThreads': '50',
            'HttpxFlagTimeout': '15', 
            'NucleiCommonFlagTimeout': '10', 
            'NucleiCommonRetries': '2', 
            'NucleiCommonRetryDelaySeconds': '5',
            'NucleiSqliTemplatePath': 'nuclei-templates/vulnerabilities/sqli',
            'NucleiSqliSeverity': 'medium,high,critical',
            'NucleiWebTemplatePath': 'nuclei-templates/vulnerabilities',
            'NucleiWebSeverity': 'low,medium,high,critical',
            'KatanaJsCrawlConcurrency': '10', 
            'KatanaJsCrawlDepth': '3', 
            'FfufThreads': '100', 
            'FfufMatchCodes': '200,301,302,403', 
            'FfufMatchSize': '100-', 
            'FfufFilterCodes': '404', 
            'TrufflehogMaxDepth': '100',
            'DnsreconScanTypes': '',
            'DnsreconThreads': '10',
            'NaabuPortRange': 'top1000', 
            'NaabuRetries': '2',
            'NaabuVerboseFlag': 'True',
            'SubfinderThreads': '50',
            'AmassFlagTimeout': '30', 
            'NucleiNetworkTemplatePath': 'nuclei-templates/network',
            'NucleiNetworkSeverity': 'low,medium,high,critical',
            'NucleiNetworkRetriesAlt': '3', 
            'HttpxLfiMatchCodes': '200,403',
            'HttpxCmsPathsFlagTimeout': '15', 
            'WordpressIndicators': '/wp-admin/,/wp-login.php,/wp-content/,/wp-config.php',
            'WpscanOutputFormatJson': 'True',
            'WpscanDisableTlsChecksFlag': 'True',
            'SqlmapOptionsBatch': 'True',
            'SqlmapOptionsForms': 'True',
            'SqlmapOptionsDbs': 'True',
            'SqlmapRetryDelaySeconds': '5',
            'ZapCheckTimeoutSeconds': '30',
            'ZapSpiderMaxChildren': '10',
            'ZapSpiderRecurse': 'True',
            'ZapStatusCheckRetries': '60',
            'ZapStatusCheckDelaySeconds': '5',
            'OpenvasConnectionHost': 'localhost',
            'OpenvasConnectionTimeoutSeconds': '30',
            'OpenvasScanConfigName': 'Full and fast',
            'OpenvasTargetNamePrefix': 'Target_',
            'OpenvasTaskNamePrefix': 'Scan_',
            'OpenvasStatusCheckRetries': '600',
            'OpenvasStatusCheckDelaySeconds': '10',
            'OpenvasRetryDelaySeconds': '10',
            'DalfoxCommonOptions': '--waf-bypass,--deep',
            'DalfoxDomOptions': '--only-dom,--waf-bypass',
            'DalfoxRetryDelaySeconds': '5',
            'XssProneParametersRegex': r'(?i)(q|search|id|lang|keyword|query|page|keywords|url|view|name|key|value)=[^&]*',
            'GospiderDepth': '3',
            'GospiderFlagsList': '--robots,--sitemap,--other-source',
            'HttpxLoginThreads': '50',
            'HttpxLoginFlagTimeout': '15', 
            'OpenRedirectParamsList': 'url,redirect,next,dest,destination,redirect_uri,out,goto',
            'CurlRedirectOutputFormat': '%{http_code} %{url_effective}',  # This is now treated literally
            'CurlRedirectMinTimeoutSeconds': '1'
        }
    }
    for section, keys in base_defaults.items():
        if not config.has_section(section):
            config.add_section(section)
        for key, value in keys.items():
            if value is not None:
                config.set(section, key, str(value) if not isinstance(value, str) else value)
            else:
                if not config.has_option(section, key):
                    config.set(section, key, '')

    config.read(config_path)

    settings = {
        "dnsrecon_path": resolve_tool_path("dnsrecon", config.get("Settings", "DNSRECON_PATH")),
        "subfinder_path": resolve_tool_path("subfinder", config.get("Settings", "SUBFINDER_PATH")),
        "amass_path": resolve_tool_path("amass", config.get("Settings", "AMASS_PATH")),
        "httpx_path": resolve_tool_path("httpx", config.get("Settings", "HTTPX_PATH")),
        "shodan_path": resolve_tool_path("shodan", config.get("Settings", "SHODAN_PATH")),
        "shodan_api_key": config.get("Settings", "SHODAN_API_KEY", fallback=None) or None,
        "naabu_path": resolve_tool_path("naabu", config.get("Settings", "NAABU_PATH")),
        "nuclei_path": resolve_tool_path("nuclei", config.get("Settings", "NUCLEI_PATH")),
        "wpscan_path": resolve_tool_path("wpscan", config.get("Settings", "WPSCAN_PATH")),
        "wpscan_api_token": config.get("Settings", "WPSCAN_API_TOKEN", fallback=None) or None,
        "waybackurls_path": resolve_tool_path("waybackurls", config.get("Settings", "WAYBACKURLS_PATH")),
        "gospider_path": resolve_tool_path("gospider", config.get("Settings", "GOSPIDER_PATH")),
        "sqlmap_path": resolve_tool_path("sqlmap", config.get("Settings", "SQLMAP_PATH")),
        "curl_path": resolve_tool_path("curl", config.get("Settings", "CURL_PATH")),
        "zap_api_url": config.get("Settings", "ZAP_API_URL"),
        "zap_api_key": config.get("Settings", "ZAP_API_KEY", fallback=None) or None,
        "openvas_username": config.get("Settings", "OPENVAS_USERNAME", fallback=None) or None,
        "openvas_password": config.get("Settings", "OPENVAS_PASSWORD", fallback=None) or None,
        "dalfox_path": resolve_tool_path("dalfox", config.get("Settings", "DALFOX_PATH")),
        "bxss_url": config.get("Settings", "BXSS_URL", fallback=None) or None,
        "redirect_url": config.get("Settings", "REDIRECT_URL"),
        "katana_path": resolve_tool_path("katana", config.get("Settings", "KATANA_PATH")),
        "ffuf_path": resolve_tool_path("ffuf", config.get("Settings", "FFUF_PATH")),
        "trufflehog_path": resolve_tool_path("trufflehog", config.get("Settings", "TRUFFLEHOG_PATH")),
        "wordlist": config.get("Settings", "WORDLIST"),
        "sqlmap_level": config.getint("ToolSettings", "sqlmap_level"),
        "sqlmap_risk": config.getint("ToolSettings", "sqlmap_risk"),
        "dns_wordlist": config.get("Dictionaries", "DNS_WORDLIST"),
        "lfi_payloads": [p.strip() for p in config.get("Dictionaries", "LFI_PAYLOADS").split(',') if p.strip()] if config.get("Dictionaries", "LFI_PAYLOADS") else [],
        "cms_paths": [p.strip() for p in config.get("Dictionaries", "CMS_PATHS").split(',') if p.strip()] if config.get("Dictionaries", "CMS_PATHS") else [],
        "login_paths": [p.strip() for p in config.get("Dictionaries", "LOGIN_PATHS").split(',') if p.strip()] if config.get("Dictionaries", "LOGIN_PATHS") else [],
        "httpx_common_threads": config.getint("ToolParams", "HttpxCommonThreads"),
        "httpx_flag_timeout": config.getint("ToolParams", "HttpxFlagTimeout"),
        "nuclei_common_flag_timeout": config.getint("ToolParams", "NucleiCommonFlagTimeout"),
        "nuclei_common_retries": config.getint("ToolParams", "NucleiCommonRetries"),
        "nuclei_common_retry_delay_seconds": config.getint("ToolParams", "NucleiCommonRetryDelaySeconds"),
        "nuclei_sqli_template_path": config.get("ToolParams", "NucleiSqliTemplatePath"),
        "nuclei_sqli_severity": config.get("ToolParams", "NucleiSqliSeverity"),
        "nuclei_web_template_path": config.get("ToolParams", "NucleiWebTemplatePath"),
        "nuclei_web_severity": config.get("ToolParams", "NucleiWebSeverity"),
        "katana_js_crawl_concurrency": config.getint("ToolParams", "KatanaJsCrawlConcurrency"),
        "katana_js_crawl_depth": config.getint("ToolParams", "KatanaJsCrawlDepth"),
        "ffuf_threads": config.getint("ToolParams", "FfufThreads"),
        "ffuf_match_codes": config.get("ToolParams", "FfufMatchCodes"),
        "ffuf_match_size": config.get("ToolParams", "FfufMatchSize"),
        "ffuf_filter_codes": config.get("ToolParams", "FfufFilterCodes"),
        "trufflehog_max_depth": config.getint("ToolParams", "TrufflehogMaxDepth"),
        "dnsrecon_scan_types": config.get("ToolParams", "DnsreconScanTypes"),
        "dnsrecon_threads": config.getint("ToolParams", "DnsreconThreads"),
        "naabu_port_range": config.get("ToolParams", "NaabuPortRange"),
        "naabu_retries": config.getint("ToolParams", "NaabuRetries"),
        "naabu_verbose_flag": config.getboolean("ToolParams", "NaabuVerboseFlag"),
        "subfinder_threads": config.getint("ToolParams", "SubfinderThreads"),
        "amass_flag_timeout": config.getint("ToolParams", "AmassFlagTimeout"),
        "nuclei_network_template_path": config.get("ToolParams", "NucleiNetworkTemplatePath"),
        "nuclei_network_severity": config.get("ToolParams", "NucleiNetworkSeverity"),
        "nuclei_network_retries_alt": config.getint("ToolParams", "NucleiNetworkRetriesAlt"),
        "httpx_lfi_match_codes": config.get("ToolParams", "HttpxLfiMatchCodes"),
        "httpx_cms_paths_flag_timeout": config.getint("ToolParams", "HttpxCmsPathsFlagTimeout"),
        "wordpress_indicators": [p.strip() for p in config.get("ToolParams", "WordpressIndicators").split(',') if p.strip()] if config.get("ToolParams", "WordpressIndicators") else [],
        "wpscan_output_format_json": config.getboolean("ToolParams", "WpscanOutputFormatJson"),
        "wpscan_disable_tls_checks_flag": config.getboolean("ToolParams", "WpscanDisableTlsChecksFlag"),
        "sqlmap_options_batch": config.getboolean("ToolParams", "SqlmapOptionsBatch"),
        "sqlmap_options_forms": config.getboolean("ToolParams", "SqlmapOptionsForms"),
        "sqlmap_options_dbs": config.getboolean("ToolParams", "SqlmapOptionsDbs"),
        "sqlmap_retry_delay_seconds": config.getint("ToolParams", "SqlmapRetryDelaySeconds"),
        "zap_check_timeout_seconds": config.getint("ToolParams", "ZapCheckTimeoutSeconds"),
        "zap_spider_max_children": config.getint("ToolParams", "ZapSpiderMaxChildren"),
        "zap_spider_recurse": config.getboolean("ToolParams", "ZapSpiderRecurse"),
        "zap_status_check_retries": config.getint("ToolParams", "ZapStatusCheckRetries"),
        "zap_status_check_delay_seconds": config.getint("ToolParams", "ZapStatusCheckDelaySeconds"),
        "openvas_connection_host": config.get("ToolParams", "OpenvasConnectionHost"),
        "openvas_connection_timeout_seconds": config.getint("ToolParams", "OpenvasConnectionTimeoutSeconds"),
        "openvas_scan_config_name": config.get("ToolParams", "OpenvasScanConfigName"),
        "openvas_target_name_prefix": config.get("ToolParams", "OpenvasTargetNamePrefix"),
        "openvas_task_name_prefix": config.get("ToolParams", "OpenvasTaskNamePrefix"),
        "openvas_status_check_retries": config.getint("ToolParams", "OpenvasStatusCheckRetries"),
        "openvas_status_check_delay_seconds": config.getint("ToolParams", "OpenvasStatusCheckDelaySeconds"),
        "openvas_retry_delay_seconds": config.getint("ToolParams", "OpenvasRetryDelaySeconds"),
        "dalfox_common_options_list": [opt.strip() for opt in config.get("ToolParams", "DalfoxCommonOptions").split(',') if opt.strip()] if config.get("ToolParams", "DalfoxCommonOptions") else [],
        "dalfox_dom_options_list": [opt.strip() for opt in config.get("ToolParams", "DalfoxDomOptions").split(',') if opt.strip()] if config.get("ToolParams", "DalfoxDomOptions") else [],
        "dalfox_retry_delay_seconds": config.getint("ToolParams", "DalfoxRetryDelaySeconds"),
        "xss_prone_parameters_regex": config.get("ToolParams", "XssProneParametersRegex"),
        "gospider_depth": config.getint("ToolParams", "GospiderDepth"),
        "gospider_flags_list": [flag.strip() for flag in config.get("ToolParams", "GospiderFlagsList").split(',') if flag.strip()] if config.get("ToolParams", "GospiderFlagsList") else [],
        "httpx_login_threads": config.getint("ToolParams", "HttpxLoginThreads"),
        "httpx_login_flag_timeout": config.getint("ToolParams", "HttpxLoginFlagTimeout"),
        "open_redirect_params_list": [p.strip() for p in config.get("ToolParams", "OpenRedirectParamsList").split(',') if p.strip()] if config.get("ToolParams", "OpenRedirectParamsList") else [],
        "curl_redirect_output_format": config.get("ToolParams", "CurlRedirectOutputFormat"),
        "curl_redirect_min_timeout_seconds": config.getint("ToolParams", "CurlRedirectMinTimeoutSeconds"),
    }
    return settings
